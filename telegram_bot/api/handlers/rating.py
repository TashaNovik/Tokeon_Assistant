"""
telegram_bot/api/handlers/rating.py
-----------------------------------
Handles user feedback interactions:
- handle_rating   ‚Äî triggered when user presses üëçüòêüëé
- handle_comment  ‚Äî triggered when user writes a comment after rating
- skip_comment    ‚Äî triggered when user sends /skip to skip commenting
"""

import sys
import os

sys.path.insert(0, os.path.abspath(os.getcwd()))

from telegram import Update
from telegram.ext import ContextTypes

from db.db import AsyncSessionLocal
from db.repository.rating_repository import RatingRepository
from db.repository.comment_repository import CommentRepository


async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Processes rating button callback with format `rate:<message_id>:<type>`.

    Args:
        update (Update): Incoming Telegram update.
        context (ContextTypes.DEFAULT_TYPE): Context object with user_data.

    Side Effects:
        - Stores the rating in the database.
        - Sets `awaiting_comment_for_id` in user_data.
        - Sends a follow-up prompt in Russian.
    """
    q = update.callback_query
    await q.answer()

    parts = q.data.split(":", 2)
    if len(parts) != 3 or parts[0] != "rate":
        return

    _, msg_id_str, rating_type = parts
    try:
        message_id = int(msg_id_str)
    except ValueError:
        return

    user_id = update.effective_user.id

    async with AsyncSessionLocal() as session:
        rating = await RatingRepository.add_rating_async(
            session=session,
            user_id=user_id,
            message_id=message_id,
            rating_type=rating_type,
        )
        context.user_data["awaiting_comment_for_id"] = rating.id

    await q.edit_message_reply_markup(reply_markup=None)

    if rating_type == "positive":
        txt = (
            "üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip)."
        )
    elif rating_type == "neutral":
        txt = (
            "üòê –°–ø–∞—Å–∏–±–æ, –º—ã —Ü–µ–Ω–∏–º –≤–∞—à –æ—Ç–∑—ã–≤.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç (–∏–ª–∏ /skip)."
        )
    else:
        txt = (
            "üëé –ñ–∞–ª—å, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —É—Å—Ç—Ä–æ–∏–ª.\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (–∏–ª–∏ /skip)."
        )
    await q.message.reply_text(txt)


async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles comment text sent by user after a rating.

    Args:
        update (Update): Incoming Telegram message with comment.
        context (ContextTypes.DEFAULT_TYPE): Context containing user_data.

    Side Effects:
        - Saves the comment in the database.
        - Clears `awaiting_comment_for_id` from user_data.
        - Sends a confirmation message in Russian.
    """
    rating_id = context.user_data.get("awaiting_comment_for_id")
    if not rating_id:
        return

    comment_text = update.message.text

    async with AsyncSessionLocal() as session:
        await CommentRepository.add_comment_async(session, rating_id, comment_text)

    context.user_data.pop("awaiting_comment_for_id", None)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


async def skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles /skip command to cancel pending comment.

    Args:
        update (Update): Telegram update containing /skip.
        context (ContextTypes.DEFAULT_TYPE): Context with user_data.

    Side Effects:
        - Removes `awaiting_comment_for_id` if present.
        - Responds in Russian with appropriate message.
    """
    if context.user_data.pop("awaiting_comment_for_id", None):
        await update.message.reply_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
    else:
        await update.message.reply_text(
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
        )
