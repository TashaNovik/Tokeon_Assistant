from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler, # –î–æ–±–∞–≤–ª–µ–Ω–æ
    filters
)
from telegram_bot.config import settings # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ settings.telegram.token —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
import logging
import httpx
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASKING_QUESTION = 1 # –ë—ã–ª–æ ASKING
AWAITING_FEEDBACK_CHOICE = 2 # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞
AWAITING_FEEDBACK_COMMENT = 3 # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

# URL –≤–∞—à–µ–≥–æ API –¥–ª—è —Ñ–∏–¥–±–µ–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ send_feedback_to_api)
# ASSISTANT_API_BASE_URL = os.getenv("TOKEON_ASSISTANT_REST_API_URL", "http://tokeon_assistant_rest_api:8001")
# –ü–µ—Ä–µ–Ω–µ—Å–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ base_url –≤ —Å–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã


def create_bot() -> Application:
    """
    Create and configure the Telegram Application with command handlers.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à settings.telegram.token
    # –ï—Å–ª–∏ settings - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –º–æ–¥—É–ª—å, —Ç–æ settings.telegram_token
    # –∏–ª–∏ –∫–∞–∫ —É –≤–∞—Å —Ç–∞–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –±—É–¥—É —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.
    bot_token = settings.telegram_token if hasattr(settings, 'telegram_token') else settings.telegram.token

    app = Application.builder() \
        .token(bot_token) \
        .build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ–∏–¥–±–µ–∫–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ ConversationHandler, –µ—Å–ª–∏ –æ–Ω –µ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç)
    # –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —á–∞—Å—Ç—å—é ConversationHandler –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ ConversationHandler –Ω–µ –º–µ—à–∞–µ—Ç
    app.add_handler(CallbackQueryHandler(feedback_button_callback, pattern="^feedback:"))


    conv_handler_ask = ConversationHandler(
        entry_points=[CommandHandler("ask", ask_start)],
        states={
            ASKING_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_receive_question)],
            AWAITING_FEEDBACK_CHOICE: [ # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤–Ω–µ ConvHandler
                # CallbackQueryHandler(feedback_button_callback, pattern="^feedback:"), # –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å MessageHandler, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_while_awaiting_feedback_choice)
            ],
            AWAITING_FEEDBACK_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback_comment),
                CommandHandler("skip_comment", skip_feedback_comment) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)],
        # allow_reentry=True # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # per_message=False # –í–∞–∂–Ω–æ –¥–ª—è CallbackQueryHandler –≤–Ω—É—Ç—Ä–∏ ConversationHandler
    )
    app.add_handler(conv_handler_ask)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    # app.add_handler(CommandHandler("cancel", cancel_conversation)) # –£–∂–µ –≤ fallbacks

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–æ–≤
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    bot_commands = [
        BotCommand("start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
        BotCommand("ask", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"),
    ]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º context.bot.set_my_commands –≤ post_init, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏–ª–∏ —Ç–∞–∫, –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç
    # await app.bot.set_my_commands(bot_commands) # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ async —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ post_init

    async def post_init(application: Application):
        await application.bot.set_my_commands(bot_commands)

    app.post_init = post_init


    return app


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π `/ask`, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help  ‚Äî –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/ask   ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É\n"
        "/cancel‚Äî –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
    )

async def ask_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    return ASKING_QUESTION


async def ask_receive_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∏–¥–±–µ–∫–∞.
    """
    question = update.message.text
    chat_id = update.message.chat_id # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –∏–ª–∏ –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏–π

    try:
        # ask_assistant_via_api —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å —Å 'answer' –∏ 'answer_id'
        assistant_response_data = await ask_assistant_via_api(question)
    except Exception as e:
        logger.error(f"Assistant service failed for question '{question}'", exc_info=e)
        await update.message.reply_text(
            "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

    if not assistant_response_data or assistant_response_data.get("answer") is None:
        answer_id_for_error = assistant_response_data.get("answer_id") if assistant_response_data else None
        if answer_id_for_error:
            context.user_data['current_answer_id'] = answer_id_for_error
            context.user_data['feedback_message_id_to_edit'] = None # –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            feedback_prompt_text = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç. –•–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ?"
            keyboard = [
                [InlineKeyboardButton("üëé –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data=f"feedback:{answer_id_for_error}:error_report")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            feedback_msg = await update.message.reply_text(feedback_prompt_text, reply_markup=reply_markup)
            context.user_data['feedback_message_id_to_edit'] = feedback_msg.message_id
            return AWAITING_FEEDBACK_COMMENT # –û–∂–∏–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—à–∏–±–∫–µ
        else:
            await update.message.reply_text("‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–≤–µ—Ç, –∏ ID –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
            return ConversationHandler.END


    answer_text = assistant_response_data["answer"]
    answer_id = assistant_response_data["answer_id"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º answer_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    context.user_data['current_answer_id'] = answer_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await update.message.reply_text(answer_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∏–¥–±–µ–∫–∞
    feedback_prompt_text = "–û—Ü–µ–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç:"
    keyboard = [
        [
            InlineKeyboardButton("üëç –ü–æ–∑–∏—Ç–∏–≤–Ω–æ", callback_data=f"feedback:{answer_id}:positive"),
            InlineKeyboardButton("üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", callback_data=f"feedback:{answer_id}:neutral"),
            InlineKeyboardButton("üëé –ù–µ–≥–∞—Ç–∏–≤–Ω–æ", callback_data=f"feedback:{answer_id}:negative"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    feedback_message = await update.message.reply_text(feedback_prompt_text, reply_markup=reply_markup)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    context.user_data['feedback_message_id_to_edit'] = feedback_message.message_id

    return AWAITING_FEEDBACK_COMMENT # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏)

async def ask_assistant_via_api(question: str) -> dict | None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ API –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å 'answer' –∏ 'answer_id'.
    """
    base_url = os.getenv("TOKEON_ASSISTANT_REST_API_URL", "http://tokeon_assistant_rest_api:8001")
    url = f"{base_url}/answers" # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ó–ê–ü–†–û–°–ê –æ—Ç–≤–µ—Ç–∞
    data = {"query": question}
    logger.info(f"Sending question to assistant API: {url} with data: {data}")

    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=data, timeout=httpx.Timeout(60, connect=10))

        response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è 4xx/5xx –∫–æ–¥–æ–≤
        answer_data = response.json()
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–µ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'answer' –∏ 'answer_id'
        if 'answer' in answer_data and 'answer_id' in answer_data:
            logger.info(f"Received from assistant API: {answer_data}")
            return answer_data
        else:
            logger.error(f"Assistant API response missing 'answer' or 'answer_id'. Received: {answer_data}")
            # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å None, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã—à–µ
            return {"answer": None, "answer_id": answer_data.get("answer_id")}

    except httpx.HTTPStatusError as e:
        logger.error(f"HTTP error from assistant API: {e.response.status_code} - {e.response.text}")
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å answer_id –∏–∑ —Ç–µ–ª–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
        try:
            error_data = e.response.json()
            return {"answer": None, "answer_id": error_data.get("answer_id")}
        except: # noqa E722
            pass
        raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å ID
    except Exception as e:
        logger.error(f"Error calling assistant API: {e}")
        raise


async def send_feedback_to_api(answer_id: str, reaction: str, comment: str | None = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±–µ–∫ –Ω–∞ –≤–∞—à –±—ç–∫–µ–Ω–¥."""
    base_url = os.getenv("TOKEON_ASSISTANT_REST_API_URL", "http://tokeon_assistant_rest_api:8001")
    feedback_url = f"{base_url}/answers/{answer_id}/feedback"
    payload = {"feedback_reaction": reaction}
    # –í–∞—à API –æ–∂–∏–¥–∞–µ—Ç "comment": "string1", –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π, –º–æ–∂–µ—Ç –±—ã—Ç—å "comment": ""
    payload["comment"] = comment if comment is not None else ""

    logger.info(f"Sending feedback to {feedback_url} with payload: {payload}")
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(feedback_url, json=payload, timeout=httpx.Timeout(60, connect=10))
            response.raise_for_status()
            logger.info(f"Feedback sent for answer_id {answer_id}. Status: {response.status_code}")
            return True
    except httpx.RequestError as e:
        logger.error(f"Error sending feedback for answer_id {answer_id}: {e}")
        if hasattr(e, 'response') and e.response is not None:
            logger.error(f"Feedback API Response status: {e.response.status_code}, body: {e.response.text}")
        return False
    except Exception as e:
        logger.error(f"Unexpected error sending feedback: {e}")
        return False


async def feedback_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int | None:
    query = update.callback_query
    await query.answer()

    try:
        action_type, answer_id_from_callback, reaction_value = query.data.split(":")
        logger.info(f"Feedback button: {query.data}")
    except ValueError:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
        return ConversationHandler.END # –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ

    if action_type != "feedback":
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
        return ConversationHandler.END # –∏–ª–∏ None

    context.user_data['current_answer_id'] = answer_id_from_callback
    context.user_data['current_reaction_for_feedback'] = reaction_value
    feedback_msg_id_to_edit = context.user_data.get('feedback_message_id_to_edit', query.message.message_id if query.message else None)

    chat_id_for_edit = query.message.chat_id if query.message else context.user_data.get('chat_id_for_feedback') # –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ chat_id –≤ user_data –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    if not chat_id_for_edit: # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞
        logger.error("Cannot determine chat_id for editing feedback message.")
        return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ

    new_text_for_feedback_message = ""
    new_reply_markup = None

    if reaction_value == "request_comment":
        new_text_for_feedback_message = "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–≤–µ—Ç—É (–∏–ª–∏ /skip_comment –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
        # –ö–Ω–æ–ø–∫–∏ —É–∂–µ —É–±—Ä–∞–Ω—ã –∏–ª–∏ –±—É–¥—É—Ç —É–±—Ä–∞–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –º—ã –∂–¥–µ–º —Ç–µ–∫—Å—Ç
    elif reaction_value == "error_report":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ"
        # current_reaction_for_feedback —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ "error_report"
        # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞ "negative" –¥–ª—è API, –µ—Å–ª–∏ API –Ω–µ –∑–Ω–∞–µ—Ç "error_report"
        context.user_data['current_reaction_for_feedback'] = "negative" # –ü—Ä–∏–º–µ—Ä
        new_text_for_feedback_message = "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (–∏–ª–∏ /skip_comment –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    else: # positive, neutral, negative
        # –û—Ü–µ–Ω–∫–∞ –≤—ã–±—Ä–∞–Ω–∞, —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        reaction_display = {
            "positive": "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ üëç",
            "neutral": "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ üòê",
            "negative": "–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ üëé"
        }.get(reaction_value, "–û—Ü–µ–Ω–∫–∞")

        new_text_for_feedback_message = (
            f"{reaction_display} –ø—Ä–∏–Ω—è—Ç–∞.\n"
            "üìù –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip_comment, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫—É."
        )
        # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" –∏ "–û—Ç–º–µ–Ω–∞", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # keyboard_skip = [[InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"feedback:{answer_id_from_callback}:skip_direct")]]
        # new_reply_markup = InlineKeyboardMarkup(keyboard_skip) # –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å–∫–∞

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if feedback_msg_id_to_edit:
        try:
            await context.bot.edit_message_text(
                text=new_text_for_feedback_message,
                chat_id=chat_id_for_edit,
                message_id=feedback_msg_id_to_edit,
                reply_markup=new_reply_markup # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            )
        except Exception as e:
            logger.error(f"Failed to edit feedback message: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(chat_id=chat_id_for_edit, text=new_text_for_feedback_message, reply_markup=new_reply_markup)
    elif query.message: # –ï—Å–ª–∏ ID –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(new_text_for_feedback_message, reply_markup=new_reply_markup)
    else: # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        logger.warning("Could not find message to edit or reply to for feedback prompt.")
        # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return ConversationHandler.END


    return AWAITING_FEEDBACK_COMMENT # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–∏–ª–∏ /skip_comment)


async def receive_feedback_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±–µ–∫ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º."""
    comment_text = update.message.text
    answer_id = context.user_data.get('current_answer_id')
    reaction = context.user_data.get('current_reaction_for_feedback', "neutral") # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∫–Ω–æ–ø–∫–∏

    if not answer_id:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫ –∫–∞–∫–æ–º—É –æ—Ç–≤–µ—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /ask.")
        return ConversationHandler.END

    logger.info(f"Received comment '{comment_text}' for answer_id {answer_id} with reaction {reaction}")
    feedback_sent = await send_feedback_to_api(answer_id, reaction, comment=comment_text)

    if feedback_sent:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç—ã.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel.")

    # –û—á–∏—Å—Ç–∫–∞ user_data
    if 'current_answer_id' in context.user_data: del context.user_data['current_answer_id']
    if 'current_reaction_for_feedback' in context.user_data: del context.user_data['current_reaction_for_feedback']
    if 'feedback_message_id_to_edit' in context.user_data: del context.user_data['feedback_message_id_to_edit']

    return ConversationHandler.END


async def skip_feedback_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–¥–±–µ–∫ —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–∫—Ü–∏–µ–π (–µ—Å–ª–∏ –±—ã–ª–∞)."""
    answer_id = context.user_data.get('current_answer_id')
    reaction = context.user_data.get('current_reaction_for_feedback') # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π

    if not answer_id or not reaction or reaction == "request_comment":
        await update.message.reply_text("–ù–µ—á–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏–ª–∏ –¥–∞–π—Ç–µ –æ—Ü–µ–Ω–∫—É.")
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏—è –±—ã–ª–∞ request_comment,
        # –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç ID
        return AWAITING_FEEDBACK_COMMENT if reaction == "request_comment" else ConversationHandler.END

    logger.info(f"Skipping comment for answer_id {answer_id}, sending reaction {reaction}")
    feedback_sent = await send_feedback_to_api(answer_id, reaction, comment=None) # comment=None —Å—Ç–∞–Ω–µ—Ç ""

    if feedback_sent:
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É ({reaction})! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É –æ—Ü–µ–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –û—á–∏—Å—Ç–∫–∞ user_data
    if 'current_answer_id' in context.user_data: del context.user_data['current_answer_id']
    if 'current_reaction_for_feedback' in context.user_data: del context.user_data['current_reaction_for_feedback']
    if 'feedback_message_id_to_edit' in context.user_data: del context.user_data['feedback_message_id_to_edit']

    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ ConversationHandler."""
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # –û—á–∏—Å—Ç–∫–∞ user_data –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    if 'current_answer_id' in context.user_data: del context.user_data['current_answer_id']
    if 'current_reaction_for_feedback' in context.user_data: del context.user_data['current_reaction_for_feedback']
    if 'feedback_message_id_to_edit' in context.user_data: del context.user_data['feedback_message_id_to_edit']

    return ConversationHandler.END

async def handle_text_while_awaiting_feedback_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞."""
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
    )
    return AWAITING_FEEDBACK_CHOICE # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "ü§ñ –Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ /ask, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
    )